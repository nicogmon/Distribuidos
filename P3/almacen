if (msg -> action == WRITE) {
            clock_gettime(CLOCK_REALTIME, &start_time);
            pthread_mutex_lock(&mutex);
            
            n_writers++;
    
            clock_gettime(CLOCK_REALTIME, &current_time);
    
            FILE * output_file = fopen("server_output.txt", "r+");
            
            fscanf(output_file, "%d", &counter);
    
            counter++;
    
            if (fseek(output_file, 0, SEEK_SET) < 0) {
                perror("fseek");
                sem_post(&semaphore);
                pthread_mutex_unlock(&mutex);
                close (socket_local);
                return NULL;
            }
            if (fprintf(output_file, "%d", counter) < 0) {
                perror("write");
                sem_post(&semaphore);
                    pthread_mutex_unlock(&mutex);
                    close (socket_local);
                    return NULL;
                }
    
                printf("[%f][ESCRITOR %d] modifica contador con valor %d\n",time_stamp , msg->id, counter);
                usleep(rand_sleep_ms * 1000);
                //printf("%d\n", rand_sleep_ms * 1000);
                n_writers--;
                if (server_pryority == READER && n_writers == 0) {
                    pthread_cond_broadcast(&read_cond);
                }
                pthread_mutex_unlock(&mutex);
                fclose(output_file);
    
            }
            else if (msg -> action == READ) {
            
                clock_gettime(CLOCK_REALTIME, &start_time);
                pthread_mutex_lock(&mutex);
                if (server_pryority == WRITER){
                    while (n_writers > 0 ) {
                        pthread_cond_wait(&read_cond, &mutex);
                    }
                }
                n_readers++;
                clock_gettime(CLOCK_REALTIME, &current_time);
                pthread_mutex_unlock(&mutex);
    
                printf("[%f][LECTOR %d] lee contador con valor %d\n",time_stamp , msg->id, counter);
                //printf("%d\n", rand_sleep_ms * 1000);
                usleep(rand_sleep_ms * 1000);
    
                pthread_mutex_lock(&mutex);
                n_readers--;
                if (server_pryority == WRITER && n_readers == 0) {
                    pthread_cond_signal(&read_cond);
                }
                pthread_mutex_unlock(&mutex);
    
            }
